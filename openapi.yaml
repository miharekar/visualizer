openapi: 3.0.0
info:
  title: Visualizer API
  description: |-
    API for managing shots, roasters, and coffee bags.
    Automatically generated by an LLM. Some information may be inaccurate.
servers:
  - url: https://visualizer.coffee/api
    description: Main API endpoint
components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
      example:
        error: "An error message."
    Paging:
      type: object
      properties:
        count:
          type: integer
          description: Total number of items available.
        page:
          type: integer
          description: Current page number.
        limit:
          type: integer
          description: Number of items per page.
        pages:
          type: integer
          description: Total number of pages.
      example:
        count: 100
        page: 1
        limit: 10
        pages: 10
    UserCredentials:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User's unique identifier.
        name:
          type: string
          description: User's display name.
        public:
          type: boolean
          description: Indicates if the user's profile is public.
        avatar_url:
          type: string
          format: url
          nullable: true
          description: URL of the user's avatar.
      example:
        id: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        name: "John Doe"
        public: true
        avatar_url: "https://visualizer.coffee/uploads/avatar.png"
    RoasterListItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      example:
        id: "b1c2d3e4-f5g6-7890-1234-567890abcdef"
        name: "Great Roaster Inc."
    RoasterListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/RoasterListItem"
        paging:
          $ref: "#/components/schemas/Paging"
    RoasterDetail:
      type: object
      description: Detailed information about a roaster.
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        website:
          type: string
          format: url
          nullable: true
        image_url:
          type: string
          format: url
          nullable: true
      example:
        id: "b1c2d3e4-f5g6-7890-1234-567890abcdef"
        name: "Great Roaster Inc."
        website: "https://greatroaster.com"
        image_url: "https://visualizer.coffee/uploads/roaster_image.jpg"
    CoffeeBagListItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      example:
        id: "c1d2e3f4-g5h6-7890-1234-567890abcdef"
        name: "Ethiopia Yirgacheffe"
    CoffeeBagListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CoffeeBagListItem"
        paging:
          $ref: "#/components/schemas/Paging"
    CoffeeBagDetail:
      type: object
      description: Detailed information about a coffee bag.
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        roast_date:
          type: string
          format: date
          nullable: true
        roast_level:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
        region:
          type: string
          nullable: true
        farm:
          type: string
          nullable: true
        farmer:
          type: string
          nullable: true
        variety:
          type: string
          nullable: true
        elevation:
          type: string
          nullable: true
        processing:
          type: string
          nullable: true
        harvest_time:
          type: string
          nullable: true
        quality_score:
          type: string
          nullable: true
        tasting_notes:
          type: string
          nullable: true
        url:
          type: string
          format: url
          nullable: true
        image_url:
          type: string
          format: url
          nullable: true
      example:
        id: "c1d2e3f4-g5h6-7890-1234-567890abcdef"
        name: "Ethiopia Yirgacheffe"
        roast_date: "2023-01-15"
        roast_level: "Medium"
        country: "Ethiopia"
        region: "Yirgacheffe"
        tasting_notes: "Floral, citrus, tea-like"
        image_url: "https://visualizer.coffee/uploads/coffeebag_image.jpg"
    ShotListItem:
      type: object
      properties:
        clock:
          type: integer
          format: int64
          description: Start time of the shot as a Unix timestamp.
        id:
          type: string
          format: uuid
          description: Shot's unique identifier.
        updated_at:
          type: integer
          format: int64
          description: Last update time of the shot as a Unix timestamp.
      example:
        clock: 1678886400
        id: "d1e2f3g4-h5i6-7890-1234-567890abcdef"
        updated_at: 1678886500
    ShotListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ShotListItem"
        paging:
          $ref: "#/components/schemas/Paging"
    TimeseriesData:
      type: object
      description: Contains detailed time-series data for the shot. Specific keys depend on the recording device and parser.
      properties:
        espresso_pressure:
          type: array
          items: { type: number, format: float }
          nullable: true
        espresso_pressure_goal:
          type: array
          items: { type: number, format: float }
          nullable: true
        espresso_flow:
          type: array
          items: { type: number, format: float }
          nullable: true
        espresso_flow_goal:
          type: array
          items: { type: number, format: float }
          nullable: true
        espresso_flow_weight:
          type: array
          items: { type: number, format: float }
          nullable: true
        espresso_weight:
          type: array
          items: { type: number, format: float }
          nullable: true
        espresso_temperature_basket:
          type: array
          items: { type: number, format: float }
          nullable: true
        espresso_temperature_mix:
          type: array
          items: { type: number, format: float }
          nullable: true
        espresso_temperature_goal:
          type: array
          items: { type: number, format: float }
          nullable: true
        espresso_water_dispensed:
          type: array
          items: { type: number, format: float }
          nullable: true
        espresso_state_change:
          type: array
          items: { type: string }
          nullable: true
        parser:
          type: string
          description: Name of the parser used for this shot data.
          nullable: true
      additionalProperties: true
      example:
        parser: "Parsers::DecentJson"
        espresso_pressure: [0, 0.5, 9.0, 8.8, 5.0]
        espresso_flow: [0, 1.0, 2.1, 2.0, 0.5]
        espresso_temperature_basket: [90, 90.1, 92.0, 92.1, 91.5]
    ShotMetadata:
      type: object
      description: User-defined custom metadata fields for the shot.
      additionalProperties:
        type: string
      example:
        custom_field_1: "Custom Value A"
        mood: "Exploratory"
    ShotDetail: # For "decent" format (default)
      type: object
      description: Detailed information about a shot in the default/Decent format.
      properties:
        id: { type: string, format: uuid }
        barista: { type: string, nullable: true }
        bean_brand: { type: string, nullable: true }
        bean_notes: { type: string, nullable: true }
        bean_type: { type: string, nullable: true }
        bean_weight: { type: string, nullable: true, description: "e.g., '18.5'" }
        drink_ey: { type: string, nullable: true, description: "Extraction Yield, e.g., '20.1'%" }
        drink_tds: { type: string, nullable: true, description: "Total Dissolved Solids, e.g., '1.35'%" }
        drink_weight: { type: string, nullable: true, description: "e.g., '36.2'g" }
        duration: { type: number, format: float, nullable: true, description: "seconds" }
        espresso_enjoyment: { type: integer, nullable: true }
        espresso_notes: { type: string, nullable: true }
        grinder_model: { type: string, nullable: true }
        grinder_setting: { type: string, nullable: true }
        profile_title: { type: string, nullable: true }
        roast_date: { type: string, nullable: true, description: "User's date format, e.g., '2023-10-15' or '15.10.2023'" }
        roast_level: { type: string, nullable: true }
        # Attributes from visualizer_attributes in Shot::Jsonable
        start_time: { type: string, format: "date-time", nullable: true }
        updated_at: { type: integer, format: int64, description: "Unix timestamp" }
        user_id: { type: string, format: uuid, nullable: true } # This is the shot's user_id
        user_name: { type: string, nullable: true }
        metadata: { $ref: "#/components/schemas/ShotMetadata", nullable: true }
        tags: { type: array, items: { type: string }, nullable: true }
        profile_url: { type: string, format: url, nullable: true }
        image_url: { type: string, format: url, nullable: true }
        roaster_id: { type: string, format: uuid, nullable: true }
        coffee_bag_id: { type: string, format: uuid, nullable: true }
        # Conditional brew data fields
        timeframe: { type: array, items: { type: string }, nullable: true, description: "Timestamps for data points, if chart_data is true." } # Can contain numbers or strings
        data: { $ref: "#/components/schemas/TimeseriesData", nullable: true, description: "Parsed timeseries data, if chart_data is true." }
        brewdata: { type: object, additionalProperties: true, nullable: true, description: "Raw parsed data from original file, if chart_data is false (e.g. for Beanconqueror source files that don't have separate timeframe/data)." }
      required:
        - id
        - updated_at
      example:
        id: "d1e2f3g4-h5i6-7890-1234-567890abcdef"
        barista: "John Doe"
        bean_brand: "Awesome Coffee Co."
        bean_notes: "Chocolate, caramel, nuts"
        bean_type: "Arabica"
        bean_weight: "18.5"
        drink_ey: "20.1"
        drink_tds: "1.35"
        drink_weight: "36.2"
        duration: 27.3
        espresso_enjoyment: 9
        espresso_notes: "Very balanced shot."
        grinder_model: "Niche Zero"
        grinder_setting: "15"
        profile_title: "Morning Espresso"
        roast_date: "2023-10-15"
        roast_level: "Medium"
        start_time: "2023-10-26T12:00:00Z"
        updated_at: 1678886500
        user_id: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        user_name: "John Doe"
        metadata: { "custom_field_1": "Custom Value A" }
        tags: ["favorite", "morning_ritual"]
        profile_url: "https://visualizer.coffee/api/shots/d1e2f3g4-h5i6-7890-1234-567890abcdef/profile"
        image_url: "https://visualizer.coffee/uploads/shot_image.jpg"
        roaster_id: "b1c2d3e4-f5g6-7890-1234-567890abcdef"
        coffee_bag_id: "c1d2e3f4-g5h6-7890-1234-567890abcdef"
        timeframe: ["0.0", "0.1", "25.0"]
        data: { "parser": "Parsers::DecentJson", "espresso_pressure": [0, 9.0, 5.0] }
    BeanconquerorShotDetail:
      type: object
      description: Shot information in Beanconqueror JSON format.
      properties:
        bean:
          type: object
          nullable: true
          properties:
            roaster: { type: string, nullable: true }
            name: { type: string, nullable: true } # bean_type
            roast: { type: string, nullable: true } # roast_level
            roastingDate: { type: string, format: "date-time", nullable: true, description: "ISO8601 format from shot.iso8601_roast_date_time" }
        mill:
          type: object
          nullable: true
          properties:
            name: { type: string, nullable: true } # grinder_model
        brew:
          type: object
          nullable: true
          properties:
            grind_size: { type: string, nullable: true } # grinder_setting
            brew_beverage_quantity: { type: string, nullable: true, description: "Output weight, e.g., '36.0'" } # drink_weight
            grind_weight: { type: string, nullable: true, description: "Input bean weight, e.g., '18.0'" } # bean_weight
            tds: { type: string, nullable: true } # drink_tds
            ey: { type: string, nullable: true } # drink_ey
        preparation:
          type: object
          nullable: true
          properties:
            name: { type: string, nullable: true, description: "Profile title" }
        meta:
          type: object
          properties:
            visualizer:
              type: object
              properties:
                shot_id: { type: string, format: uuid }
                user_id: { type: string, format: uuid, nullable: true }
                updated_at: { type: integer, format: int64 }
                duration: { type: number, format: float, nullable: true }
                espresso_enjoyment: { type: integer, nullable: true }
                espresso_notes: { type: string, nullable: true }
                bean_notes: { type: string, nullable: true }
                barista: { type: string, nullable: true }
                metadata: { $ref: "#/components/schemas/ShotMetadata", nullable: true }
                tags: { type: array, items: { type: string }, nullable: true }
                start_time: { type: string, format: "date-time", nullable: true }
                user_name: { type: string, nullable: true }
                profile_url: { type: string, format: url, nullable: true }
                image_url: { type: string, format: url, nullable: true }
                roaster_id: { type: string, format: uuid, nullable: true }
                coffee_bag_id: { type: string, format: uuid, nullable: true }
              required:
                - shot_id
                - updated_at
          required:
            - visualizer
        # Conditional brew data fields
        timeframe: { type: array, items: { type: string }, nullable: true, description: "Timestamps for data points, if chart_data is true." }
        data: { $ref: "#/components/schemas/TimeseriesData", nullable: true, description: "Parsed timeseries data, if chart_data is true." }
        brewdata: { type: object, additionalProperties: true, nullable: true, description: "Raw Beanconqueror JSON structure, if chart_data is false." }
      required:
        - meta
      example:
        bean: { roaster: "Awesome Coffee Co.", name: "Ethiopia Yirgacheffe", roast: "Medium", roastingDate: "2023-01-15T00:00:00Z" }
        mill: { name: "Niche Zero" }
        brew: { grind_size: "15", brew_beverage_quantity: "36.2", grind_weight: "18.5", tds: "1.35", ey: "20.1" }
        preparation: { name: "Morning Espresso BC" }
        meta:
          visualizer:
            shot_id: "d1e2f3g4-h5i6-7890-1234-567890abcdef"
            updated_at: 1678886500
        # brewdata will contain the original Beanconqueror structure if chart_data? is false
    ShotResponse:
      oneOf:
        - $ref: "#/components/schemas/ShotDetail"
        - $ref: "#/components/schemas/BeanconquerorShotDetail"
      description: Detailed shot information. Structure depends on the 'format' parameter.
    ShotUploadResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
      example:
        id: "e1f2g3h4-i5j6-7890-1234-567890abcdef"
    ShotDestroyResponse:
      type: object
      properties:
        success:
          type: boolean
      example:
        success: true
    ProfileJsonResponse:
      type: object
      description: JSON representation of a shot's profile fields (Decent specific).
      additionalProperties: true
      example:
        title: "Spring Lever"
        author: "Decent User"
        notes: "A lovely spring lever simulation."
        steps: [{ "name": "Preinfusion", "temperature": 92, "pressure": 3, "time": 10 }]
    SharedShotResponse:
      oneOf:
        - $ref: "#/components/schemas/ShotResponse" # A single shared shot
        - type: array # A list of shared shots
          items:
            $ref: "#/components/schemas/ShotResponse"
      description: |-
        If a 'code' parameter was provided and valid, a single shared shot (structure depends on 'format' param) is returned.
        Otherwise, if the user is authenticated, an array of their shared shots is returned (structure per shot depends on 'format' param).
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: HTTP Basic authentication.
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: OAuth2 Bearer token (typically from Doorkeeper).
  parameters:
    PageParam: { name: page, in: query, description: "Page number for pagination.", required: false, schema: { type: integer, default: 1 } }
    ItemsParam: { name: items, in: query, description: "Number of items per page.", required: false, schema: { type: integer, default: 10, maximum: 100 } }
    ShotIdParam: { name: id, in: path, required: true, description: "Identifier of the shot.", schema: { type: string, format: uuid } }
    RoasterIdParam: { name: roaster_id, in: path, required: true, description: "Identifier of the roaster.", schema: { type: string, format: uuid } }
    CoffeeBagIdParam: { name: id, in: path, required: true, description: "Identifier of the coffee bag.", schema: { type: string, format: uuid } } # Matches route segment :id
    CodeParam: { name: code, in: query, description: "Optional unique code for a specific shared shot.", required: false, schema: { type: string } }
    ShotFormatParam:
      name: format
      in: query
      description: "Format for the main shot data. 'decent' (default) or 'beanconqueror'."
      required: false
      schema:
        type: string
        enum: [decent, beanconqueror]
        default: decent
    ProfileFormatParam:
      name: format
      in: query
      description: "Requested format for the downloadable profile (csv, json, tcl)."
      required: false
      schema:
        type: string
        enum: [csv, json, tcl]
    EssentialsParam:
      name: essentials
      in: query
      description: "If true, may reduce the amount of information returned for a shot."
      required: false
      schema: { type: boolean }
    WithDataParam:
      name: with_data
      in: query
      description: "If true, includes full information for shared shots."
      required: false
      schema: { type: boolean }
paths:
  /me:
    get:
      summary: Get current user's credentials
      operationId: getCurrentUserCredentials
      tags: [Credentials]
      security:
        - basicAuth: []
        - bearerAuth: []
      responses:
        "200":
          description: Successful response with user credentials.
          content: { application/json: { schema: { $ref: "#/components/schemas/UserCredentials" } } }
        "401":
          description: Unauthorized
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }

  /shots:
    get:
      summary: List shots
      operationId: listShots
      tags: [Shots]
      security:
        - basicAuth: []
        - bearerAuth: []
        - {} # Allows anonymous access for public shots
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/ItemsParam"
        - name: sort
          in: query
          description: Sort order for shots.
          required: false
          schema:
            type: string
            enum: [start_time, updated_at]
            default: start_time
      responses:
        "200":
          description: A paginated list of shots.
          content: { application/json: { schema: { $ref: "#/components/schemas/ShotListResponse" } } }
        "401":
          description: Unauthorized (though endpoint allows some public access)
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "422":
          description: Could not paginate.
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }

  /shots/upload:
    post:
      summary: Upload a new shot
      operationId: uploadShot
      tags: [Shots]
      security:
        - basicAuth: []
        - bearerAuth: ["upload", "write"]
      requestBody:
        description: Shot file to upload.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties: { file: { type: string, format: binary, description: "The shot file." } }
          application/json:
            schema:
              type: object # Actual schema depends on the file format being uploaded as JSON
              description: JSON representation of the shot data.
              example: { "time": [0, 1, 2], "pressure": [0, 9, 9], "flow": [0, 2, 2] }
      responses:
        "200": # Or 201 Created, but controller returns 200
          description: Shot uploaded successfully.
          content: { application/json: { schema: { $ref: "#/components/schemas/ShotUploadResponse" } } }
        "401":
          description: Unauthorized
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "403":
          description: Forbidden (User not authorized for upload access)
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "422":
          description: Could not save the provided file or no file provided.
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }

  /shots/{id}:
    get:
      summary: Get a specific shot
      operationId: getShotById
      tags: [Shots]
      parameters:
        - $ref: "#/components/parameters/ShotIdParam"
        - $ref: "#/components/parameters/ShotFormatParam"
        - $ref: "#/components/parameters/EssentialsParam"
      responses:
        "200":
          description: Detailed information about the shot. Structure depends on the 'format' parameter.
          content: { application/json: { schema: { $ref: "#/components/schemas/ShotResponse" } } }
        "404":
          description: Shot not found.
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
    delete:
      summary: Delete a specific shot
      operationId: deleteShotById
      tags: [Shots]
      security:
        - basicAuth: []
        - bearerAuth: ["write"]
      parameters:
        - $ref: "#/components/parameters/ShotIdParam"
      responses:
        "200":
          description: Shot deleted successfully.
          content: { application/json: { schema: { $ref: "#/components/schemas/ShotDestroyResponse" } } }
        "401":
          description: Unauthorized
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "403":
          description: Forbidden (User not authorized to delete this shot).
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "404":
          description: Shot not found.
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }

  /shots/{id}/download:
    get:
      summary: Download a specific shot's data
      description: Alias for GET /shots/{id}. Response structure depends on the 'format' parameter.
      operationId: downloadShotById
      tags: [Shots]
      parameters:
        - $ref: "#/components/parameters/ShotIdParam"
        - $ref: "#/components/parameters/ShotFormatParam"
        - $ref: "#/components/parameters/EssentialsParam"
      responses:
        "200":
          description: Shot data. Structure depends on the 'format' parameter.
          content: { application/json: { schema: { $ref: "#/components/schemas/ShotResponse" } } }
        "404":
          description: Shot not found.
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }

  /shots/{id}/profile:
    get:
      summary: Get a shot's profile data
      operationId: getShotProfile
      tags: [Shots]
      parameters:
        - $ref: "#/components/parameters/ShotIdParam"
        - $ref: "#/components/parameters/ProfileFormatParam"
      responses:
        "200":
          description: Shot profile data. Content type varies based on profile and format.
          content:
            application/json: # For format=json (Decent profile)
              schema: { $ref: "#/components/schemas/ProfileJsonResponse" }
            text/csv: # For format=csv
              schema: { type: string, description: "CSV representation of the shot profile." }
            application/x-tcl: # For format=tcl
              schema: { type: string, description: "TCL representation of the shot profile." }
        "404":
          description: Shot not found.
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "422":
          description: Shot does not have a profile in the requested format or at all.
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }

  /shots/shared:
    get:
      summary: Get a shared shot by code or list user's shared shots
      operationId: getOrListSharedShots
      tags: [Shots]
      security:
        - basicAuth: [] # Needed for listing user's shared shots
        - bearerAuth: [] # Needed for listing user's shared shots
        - {} # Allows anonymous access if 'code' is provided
      parameters:
        - $ref: "#/components/parameters/CodeParam"
        - $ref: "#/components/parameters/ShotFormatParam"
        - $ref: "#/components/parameters/WithDataParam"
      responses:
        "200":
          description: |-
            Successfully retrieved a specific shared shot (if 'code' was provided)
            or a list of the authenticated user's shared shots.
            Response structure for individual shots may depend on the 'format' parameter.
          content: { application/json: { schema: { $ref: "#/components/schemas/SharedShotResponse" } } }
        "401":
          description: Unauthorized to list shared shots (when no 'code' is provided and user is not authenticated).
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "404":
          description: Shared shot not found (if 'code' was provided and not found).
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }

  /roasters:
    get:
      summary: List all roasters for the current user
      operationId: listRoasters
      tags: [Roasters]
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/ItemsParam"
      responses:
        "200":
          description: A paginated list of roasters.
          content: { application/json: { schema: { $ref: "#/components/schemas/RoasterListResponse" } } }
        "401":
          description: Unauthorized
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }

  /roasters/{roaster_id}:
    get:
      summary: Get a specific roaster
      operationId: getRoasterById
      tags: [Roasters]
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/RoasterIdParam"
      responses:
        "200":
          description: Detailed information about the roaster.
          content: { application/json: { schema: { $ref: "#/components/schemas/RoasterDetail" } } }
        "401":
          description: Unauthorized
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "404":
          description: Roaster not found.
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }

  /roasters/{roaster_id}/coffee_bags:
    get:
      summary: List coffee bags for a specific roaster
      operationId: listCoffeeBagsByRoaster
      tags: ["Coffee Bags"]
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/RoasterIdParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/ItemsParam"
      responses:
        "200":
          description: A paginated list of coffee bags.
          content: { application/json: { schema: { $ref: "#/components/schemas/CoffeeBagListResponse" } } }
        "401":
          description: Unauthorized
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "404":
          description: Roaster not found.
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }

  /roasters/{roaster_id}/coffee_bags/{id}:
    get:
      summary: Get a specific coffee bag
      operationId: getCoffeeBagById
      tags: ["Coffee Bags"]
      security:
        - basicAuth: []
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/RoasterIdParam"
        - $ref: "#/components/parameters/CoffeeBagIdParam"
      responses:
        "200":
          description: Detailed information about the coffee bag.
          content: { application/json: { schema: { $ref: "#/components/schemas/CoffeeBagDetail" } } }
        "401":
          description: Unauthorized
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
        "404":
          description: Roaster or Coffee Bag not found.
          content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } }
